#!/usr/bin/perl -w
#
use Getopt::Long;
use strict;

my $usage="
NAME
  find_best_pdb_for_seqres_md5 - find a pdb code and chain that best represents the SEQRES sequence 
SYNOPSIS
  find_best_pdb_for_seqres_md5 <-m md5> 
DESCRIPTION
  find_best_pdb_for_seqres_md5 takes an input md5 and runs searches on the pdb tables in Aquaria
  selection criteria are:
  1. find structure(s) with as much overlap between SEQRES and coordinates as possible
  2. select structure(s) with good resolution
  3. select a new structure  
  (by default we give only one structure)
OPTIONS
  -h          The option -h displays help and exits.
  -d          Debug option: be verbose (not implemented yet!)
  -m		  md5 sum of SEQRES sequence to search
  -n N		  return up to N pdb ids with longest overlap with SEQRES
  -r n:m	  require the pdb structure to cover the given range of SEQRES residues
  -p          print a line giving the matching ranges
  -l 		  print a line giving the match lengths
AUTHOR
  Andrea Schafferhans <andrea.schafferhans\@rostlab.org>
\n";

# if there are no arguments or -h, then print man entry
if (@ARGV<1) {die ($usage);}
our($dbg,$help,$md5,$multi,$acceptRatio,$rangeOutput,$range,$rBegin,$rEnd);
$help = 0;
$multi = 1;  # how many structure we return 
$rangeOutput = 0;
$lengthOutput = 0;
$range = '';
$acceptRatio=0.9; # how long the less long alignments can be compared to the longest
my $args_ok=GetOptions( 'debug'  => \$dbg,
                        'help' => \$help,
                        'md5=s' => \$md5,
                        'n=i' => \$multi,
                        'range=s' => \$range,
                        'printRange' => \$rangeOutput,
                        'length' => \$lengthOutput
);

if ($help || !$args_ok){
	print $usage;
	exit;
}

if ($range){
	($rBegin, $rEnd) = split /\:/, $range;
}
else {
	$rBegin = 0;
	$rEnd = 0;
}

my @selectedIds;

#  1. find a structure with as much overlap between SEQRES and coordinates as possible
#  get all chains for the given md5
my $alignInfo = `DB.aquaria_local "select c.pdb_id, c.chain, c.Align_to_SEQRES from PDB_chain c where c.MD5_Hash='$md5';"`; 
#print $alignInfo;

my %aliLength;
my %aliMatchLength;
my %pdbCode;
my %chain;
my %method;
my %resolution;
my %published;
my %aliRange;
my @alignLines = split /\n/, $alignInfo;
# first line has column headings
shift @alignLines;
# split out the info
foreach my $line(@alignLines){
    my @columns = split /\t/, $line;
#    print join('|', @columns), "\n";
    my $id = $columns[0];
    if ($columns[1]){$id .= '_'.$columns[1]};
    my @alignPieces = split /\\n/, $columns[2];
#    print join('||', @alignPieces), "\n";
    my $length = 0;
    my $matchLength = 0;
    my $aliStart = 0;
    my $aliEnd = 0;
	# analyse alignment to find out what range it covers and how long it is
    foreach my $piece(@alignPieces){
		my ($seqres, $atom) = split /\:/, $piece;
		if ($seqres =~ /\-/){
	    	my ($seqresStart, $seqresEnd) = split /\-/, $seqres;    
	    	# get total length of alignment
	    	$length += ($seqresEnd-$seqresStart+1);
			unless ($aliStart){
				$aliStart = $seqresStart;
			}
			$aliEnd = $seqresEnd;
			# get length of overlap with required range
			if ($range){
				my ($overlapStart, $overlapEnd);
				$overlapStart = 0;
				if ($seqresStart <= $rEnd){
					if ($seqresStart >= $rBegin){
						$overlapStart = $seqresStart;
					}
					else {
						$overlapStart = $rBegin;
					}
				}
				if ($seqresEnd >= $rBegin){
					if ($seqresEnd <= $rEnd){
						$overlapEnd = $seqresEnd;
					}
					else {
						$overlapEnd = $rEnd;
					}
				}
				if ($overlapStart && ($overlapStart <= $overlapEnd)){
					$matchLength += ($overlapEnd-$overlapStart+1);
				}
#				print $piece, " (check against $rBegin:$rEnd) -> $overlapStart, $overlapEnd \n" 
			}
		}
		else {
			$length++; 
			$aliEnd = $seqres;
			if ($range){
				if ($rBegin <= $seqres && $seqres <= $rEnd){
					$matchLength++;
				}
			}
		}
#	print " at $seqres : aliLength: $aliLength \n"; 
    }
#    print "aliLength: $aliLength \n";
    $aliLength{$id} = $length;
    $aliRange{$id} = $aliStart.'-'.$aliEnd;
    $pdbCode{$id} = $columns[0];
    $chain{$id} = $columns[1];

	# if we have required range we want to match, we only count the overlap as alignment length
	if ($range){
		$aliMatchLength{$id} = $matchLength;
	}
	else {
		$aliMatchLength{$id} = $length;
	}

}

#print %aliLength, "\n";
#print %aliMatchLength, "\n";

# find longest alignment(s)
# accept everything that is at least x% of the longest alignment
my @sortedIds = sort sortByAliMatchLength (keys %aliMatchLength);
#print "sorted Ids: ", join (',', @sortedIds), "\n";
my $maxAliLength = $aliMatchLength{$sortedIds[0]};
#print $maxAliLength, "\n";
my @bestIds;
BEST: foreach my $id(@sortedIds){
    if ( $maxAliLength > 0 and $aliLength{$id} >= $maxAliLength*$acceptRatio){
		push @bestIds, $id;
    }
    else {last BEST};
}
#print "best Ids: ", join (',', @bestIds), "\n";

# if there is more than we need with the longest alignment length
# take the next steps:
#  2. select structure(s) with good resolution
#  3. select a new structure
if ($#bestIds > $multi-1){
	# get the info from the database and parse
    foreach my $id(@bestIds){
		my $p = $pdbCode{$id};
#		my $c = $chain{$id}
		my $strucInfo = `DB.aquaria_local "select p.Published, p.Experimental_Method, p.Resolution from PDB p where p.PDB_ID='$p'";`; 
		my @strucLines = split /\n/, $strucInfo;
# first line has column headings
		my $line = $strucLines[1];
		my @columns = split /\t/, $line;
#	print join('|', @columns), "\n";
		$published{$id} = $columns[0];
		$method{$id} = $columns[1];
		$resolution{$id} = $columns[2];
		unless ($resolution{$id}){
			# set the resolution to a fake (bad) value
			$resolution{$id} = 4.0
		}
    }

    # evaluate the info
	# sort by length, resolution, published date
	@selectedIds = sort sortByLengthAndResolutionAndDate @bestIds;
}
else {
    @selectedIds = @bestIds;
}

# check whether we found anything at all
# if not add a fake id that makes sure the receiving scripts don't break because of empty output
my @ranges = ();
my @lengths = ();
unless (defined $selectedIds[0] &&  $selectedIds[0]=~/\w/){
	push @selectedIds, '0xxx';
	push @ranges, ' ';
	push @lengths, '1';
}

# work out the slice we want to return
my $lastIndex;
if ($#selectedIds > $multi-1){
	$lastIndex = $multi-1;
}
else{
	$lastIndex = $#selectedIds;
}

my @slice = @selectedIds[0 .. $lastIndex];
print join(";", @slice), "\n";
if ($rangeOutput){
	foreach my $id(@slice){
		push @ranges, $aliRange{$id};
	}
	print join(";", @ranges), "\n";
}

if ($lengthOutput){
	foreach my $id(@slice){
		push @lengths, $aliMatchLength{$id};
	}
	print join(";", @lengths), "\n";
}


sub sortByAliMatchLength {
    $aliMatchLength{$b} <=> $aliMatchLength{$a};
}

sub sortByLengthAndResolutionAndDate {
    $aliMatchLength{$b} <=> $aliMatchLength{$a} ||
    $resolution{$a} <=> $resolution{$b} ||
    $published{$b} cmp $published{$a};
}

