#!/bin/bash

# variant of make_new_hhblits_db suited for submitting jobs in the cloud
# In the cloud, we need to prepare all files for making a new hhblits database,
# write the output to S3 and later on generate the actual hhblits database on a machine 
# where we collect all data locally
# This script manages submitting the jobs for preparing the a3m and hhm files:
# this script works based on the pdb table in the mysql database
# (-> extracting SEQRES and redundancy reduction are delegated to the database import)
# it writes the output a3m files to the cache, adds psipred a3m files to the chache,
# produces hhm files containing secondary structure and also adds that to the cache
#
# Collecting the files into one directory will have to be done by another script 
# on a machine with enough disk space attached

qsubFlag='-e /mnt/project/pssh/pssh2_project/work/log_pdbFull/ -o /mnt/project/pssh/pssh2_project/work/log_pdbFull/'
if [ -z "$conf_file" ]
then
	conf_file='/etc/pssh2.conf'
else
	# make sure we pass on the conf file if there was one
	# CAVE: THis must be accessible on the queue!
	qsubFlag="$qsubFlag -v conf_file=$conf_file"
fi
echo "conf_file: $conf_file, qsubFlag: $qsubFlag"

usage()
{
cat << EOT
NAME
  prepare_new_hhblits_db - generate a new hhblits database (for any set of sequences) 
SYNOPSIS
  prepare_new_hhblits_db <-m md5List> [-n dbName] [-d dbDate] 
DESCRIPTION
  prepare_new_hhblits_db iterates over sequences given in the md5List,
  runs build_hhblits_profile for each sequence (to get a3m files),
  which in turn 
  - runs addss.pl on each a3m file (based on the best pdb structure for the sequence),
  - generates hhm and seq219 files from the output
  - calls the store routine to collect the output a3m, hhm and seq219 files.
  The actual generation of the database happens separately.
  This script assumes that the sequences given in the md5List are valid sequences,
  any sorting out of DNA sequences, short sequences or some with too many non-amino acid residues
  must happen in the process that constructs the md5List. 
  Any input behind "--" is passed on build_hhblits_structure_profile 
OPTIONS
  -n          name for hhblits database (default: hhblitsdb)
  -d          output name for subdirectory of hhblits database, i.e. dated version (default: current)
  -m          file containing md5s to run over 
  -h          print this help and exit
  -D          give debug output (passed on to child scripts)
AUTHOR
  Andrea Schafferhans <andrea.schafferhans@rostlab.org>
EOT
exit 1
}


# parameters (will be overwritten by anything read from conf file or the command line)
dbName='hhblitsdb'   # for pdbFull this is pdb_full
dbDate='current'     # for pdbFull this has been db_yyyymmdd
rootDir="/mnt/project/pssh/pssh2_project/" 
util_dir=$rootDir"src/util/"
n_queue=10
queue_max_wait=1000
build_hhblits_structure_profile='build_hhblits_structure_profile'

#pa3mfile='query.uniprot20.psipred.a3m' 
#source_dir=$rootDir"src/pdb_full/"

# get configurable options, e.g. local file paths
if [ -s $conf_file ]
then
	source $conf_file
fi

# by default we want to use the system installation
# but if local_paths is set we have the option to change the path and instead use the local variants
if [ $local_paths ]
then
	PATH=$local_paths:$PATH
	export PATH
	echo "Using path: $PATH"
	build_hhblits_structure_profile=`which $build_hhblits_structure_profile`
	echo "Using $build_hhblits_structure_profile"
fi

debug=0
passOpt=" " 
while getopts :m:n:d:Dh opt
do
	case $opt in
	D) debug=1; passOpt="$passOpt -D";;
	m) md5ListFile=$OPTARG;;
	n) dbName=$OPTARG;;	
	d) dbDate=$OPTARG;;
	h) usage; build_hhblits_structure_profile -h; exit;;
	:)  echo "Error: -$OPTARG requires an argument"; usage; exit 1;;
#	*) passOpt="$passOpt -$opt";;
	esac
done

if [ $debug -eq 1 ]
then
	set -x
fi


#hhblitsdb_result_dir=$rootDir"data/"$dbName
#hhblitsdb_data_dir=$rootDir"data/"$dbName"_workData"  # for pdb_full this has been pdb_derived

shift $(expr $OPTIND - 1 )
passOpt="$passOpt $@"


if [ ! -s $md5ListFile ]
then
	echo The file of md5 numbers to iterate over does not exist or is empty
	exit 1
fi

# Output caching is now completely delegated to build_hhblits_structure_profile

## loop over all md5s 
# submit further processing to the queue  
while read md5
do
	if [ -z "${md5// }" ]
	then
		break
	fi
	qsub $qsubFlag $build_hhblits_structure_profile -m $md5 -d $dbDate $passOpt		
	# check whether the queue is too full (> 10000 jobs waiting)
	# if yes, sleep a litle before we submit more
	n_waiting=1001
	sleep_time=0 
	while [ $n_waiting -gt $queue_max_wait ]
	do
		sleep $sleep_time
		n_waiting=`qstat -u $USER | grep qw | wc -l` 		
		sleep_time=$((n_waiting/n_queue)) 
	done 

done < $md5ListFile

## when all is done, loop over the md5s again and make links in the psipred_a3m_dir
#while read md5
#do
#	cachePath=`$util_dir/find_cache_path -m $md5`
#	ln -s $cachePath/$pa3mfile $psipred_a3m_dir/$md5.a3m	
#done < $md5ListFile

# wait until all jobs are finished
#n_in_queue=1
#sleep_time=0
#while [ $n_in_queue -gt 0 ]
#do
#	sleep $sleep_time
#	n_in_queue=`qstat -u $USER | wc -l` 		
#	sleep_time=$((n_in_queue/n_queue)) 
#	if [ $sleep_time -lt 10 ]
#	then
#		sleep_time=10
#	fi
#done 
echo 'All sequences submitted!'


## Generating pdb_full database files with HH-suite script hhblitsdb.pl and the MSAs with PSIPRED prediction received in last step 
#db=$hhblitsdb_result_dir"/"$dbDate
#rm -r $db 2>/dev/null #delete old db files
#mkdir -p $db 2>/dev/null

#hhblitsdb_log_dir=$rootDir"work/log_hhblitsdb/"
#mkdir $hhblitsdb_log_dir 2>/dev/null
#if $verbose ;
#then
#    echo calling hhblitsdb.pl on $pa3mdir "(see log in $hhblitsdb_log_dir)" 
#    echo $HHLIB/scripts/hhblitsdb.pl -o $db/$dbName -ia3m $pa3mdir -cpu 10 -log $hhblitsdb_log_dir/hhblitsdb_$dbName_$dbDate.log
#fi  
#$HHLIB/scripts/hhblitsdb.pl -o $db/$dbName -ia3m $pa3mdir -cpu 10 -log #$hhblitsdb_log_dir/hhblitsdb_$dbName_$dbDate.log   
