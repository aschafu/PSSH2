#!/usr/bin/env perl

# parse_hhr.pl
# Parses an HHblits HHR-output file for required informations for PSSH2:
# "uniprot_sequence_md5sum,pdb_seqres_md5sum,E-value,identity,alignment"

use strict;
use warnings;
#use File::chdir;
use Getopt::Long;

# Parameters! 
my $nRetain = 5;  # how many alignments to keep, regardless of e-value
my $evalCutoff = 1e-8;      # be a bit more permissive than in the export for Sean
my $identityCutoff = 0.9;   # storing values as decimal ratios, not percent! 
my $md5script = "fasta_to_md5"; # ruby script (expect to find this on the path after installing the package)

# Parse command line parameter
our($i, $m, $o, $s, $p, $h, $v);

my $args_ok = GetOptions(
	'i=s'  => \$i, #input hhr file
	'm=s'	=> \$m, #md5sum of the query sequence used to produce the hhr file 
	's=s'	=> \$s, #query sequence file (to work out the the md5 sum ourselves)  
    'o=s'  => \$o, #output file
#	'p=s'  => \$p, # pdb_redundant_chains-md5-seq-mapping
	'h'	=> \$h, #print help
	'v'	=> \$v #verbosity mode
);
if($h){
  print_help();
  exit;
}
if(!$i || !($m || $s)|| !$o){
  print "Missing parameters!\n";
  print_help();
  exit;
}


unless ($m){
	unless (-r $s){
		print "Sequence $s not readable!\n";
		print_help();
		exit;
	}
	my $random_string = int rand(1000);
	my $tmp_md5sum = "md5sum.".$random_string.".tmp";
	system("cat $s | $md5script > $tmp_md5sum");
	
	open FILE, $tmp_md5sum or die "Generating md5sum, but couldn't open file $tmp_md5sum\n";
	$m = join("", <FILE>);
	close FILE;
	unlink $tmp_md5sum;
	chomp $m;
}

my ($alis_ref) = read_hhr($i, $v);
write_output($alis_ref, $m, $v);


#-----------------------------------------------------------------------------------------------------------------------------------
=head 1 Subroutine print_help
Prints help.
=cut
sub print_help{
    print "Usage: parse_hhr.pl 
	-i <input hhr file>\tstandard \".hhr\" HHblits/HHsearch output file
	<[-m <md5sum>\tmd5sum of the query sequence used to produce the hhr file] OR
	 [-s <seqfile>\tquery sequence used to produce the hhr file (if not giving the md5sum directly)]>
	-o <output file>\twhere the parsed output should be written
	-h\tprints this help screen\n";
}


#-----------------------------------------------------------------------------------------------------------------------------------
=head 2 Subroutine read_hhr.
Parses the hhr output file of hhblits/hhsearch. Uses mapping of pdb chains with identical SEQRES sequence, md5sum of the sequence 
and the sequence: pdb_redundant_chains-md5-seq-mapping.
input: ($i, $v)
output: \@alis, @alis format: ($seqres_md5sum, $evalue, $identity/100.0, $gapless_blocks)
=cut

sub read_hhr{
	my ($i, $v) = @_;

	# changed 09/2015: no mapping needed any more: pdb_full now uses md5 sums, not pdb IDs
#	my %id_md5sum = ();
#	open (READ, "$mapping") or die "could not open $mapping";
#	for my $line (<READ>) {
#  	# CAVE: If the mapping file we use for evaluating a hhr file 
#  	# does not fit the pdb_full database that was used for generating the hhr file
#  	# this might fail (because the id of the representative might have changed)!
#	  	if ($line =~ /^(\S*).*\t(\S*)\t/){
#			$id_md5sum{$1} = $2; # $1=target_id, $2=seqres_md5sum
#		}
#		if ($line =~ /^(\S*).*\t(\S*)\t/){
#	  		my $md5 = $2;
#			my @cols = split /\t/, $line;
#			my @ids = split /\s/, $cols[0];
#			foreach my $id(@ids){
#				$id_md5sum{$id} = $md5; # $1=target_id, $2=seqres_md5sum
#			}
#		}
#	} 
#	close READ;
#	if ($v) {print "\%id_md5sum size: ".scalar(keys(%id_md5sum))."\n";}

	## parse the hhr file and write the output hash %alis
  	if ($v) {print "Parsing the hhr file ...\n";}
  	my $align_lines = 0;
  	my $ali_start;

	my $query_id;
	my $substr_query_id;
	my $full_target_id;
	my $substr_target_id;

	my @alis;
	my $target_id; #e.g. 1bab_A
	my $seqres_md5sum;
	my $evalue;
	my $identity;
	my $alignedCols;

	my $query_ali_start = 0;
	my $target_ali_start = 0;
	my $query_ali = ""; 
	my $target_ali = "";
	my $gapless_blocks;

  	open (READ, "$i") or die "could not open $i";
  	for my $line (<READ>) {

    	if ($line =~ /^Query\s*(\S*)/) { #query
			$query_id = $1;
			$substr_query_id = substr($query_id, 0, 14);
			$substr_query_id =~ s/\|/\\\|/g;
			if ($v) {print "Query: ".$query_id."\n\n";}
    	}
    
    	if ($align_lines) {   #alignments   
    		if ($line =~ /^>(\S+)\s/) { #1st line of an alignment
        		$full_target_id = $1;
				$substr_target_id = substr($full_target_id, 0, 14);
#				$substr_target_id =~ s/\|/\\\|/g;
				$ali_start = 1; #so that new alignment start positions will be read
				$query_ali = ""; #set to empty to read the new alignment
				$target_ali = "";
 				if ($v) {print "Target: ".$full_target_id."\n";}
      		}   

      		if ($line =~ /^Probab/) { #2nd line of an alignment
		        my @p = split(/\s+/, $line);
		        $evalue = $p[1]; 
		        $identity = $p[4];
			$alignedCols = $p[3];

		        $evalue =~ /=(.+)/; 
		        $evalue = $1; 
		        $identity =~ /=(.+)\%/;
		        $identity = $1; 
			$alignedCols =~ /=(.+)/;
			$alignedCols = $1;
      		}
      
      		#alignment blocks
      		#alignment start positions
      		if ($ali_start) {
        		if ($line =~ /^Q\s+$substr_query_id\s+(\S+)\s/){ 
          			$query_ali_start = $1;	
        		}
        		if ($line =~ /^T\s+$substr_target_id\s+(\S+)\s/){
          			$target_ali_start = $1;
          			$ali_start = 0; #ready with alignment start positions
          		}
          	}
          	#alignment sequences
          	if ($line =~ /^Q\s+$substr_query_id\s+\S+\s(\S+)/){
          		$query_ali .= $1;
          	}
          	if ($line =~ /^T\s+$substr_target_id\s+\S+\s(\S+)/){
          		$target_ali .= $1;
          	}

      		if ($line =~ /^No/ || $line =~ /Done!/) { #when next alignment begins or end - save the last alignment AND reset!

				# changed 09/2015 from pdb_id type to md5
        		if ($full_target_id =~ /(\w{32})/){
        			$target_id = $1;
        			if ($v) {print "target ID: ".$target_id."\n";}
 		       	} else{
        			print "Error: full target ID in wrong format!\n";
        			exit(1);
        		}

        		$seqres_md5sum = $target_id;
        		if ($v) {print "Target ".$target_id." SEQRES md5sum: ".$seqres_md5sum."\n";}
		    	$gapless_blocks = parse_gapless_blocks($query_ali_start, $query_ali, $target_ali_start, $target_ali, $v);

        		my @ali_values = ($seqres_md5sum, $evalue, $identity/100.0, $alignedCols, $gapless_blocks);
        		if ($v){print "saved values (seqres_md5sum, evalue, identity/100.0, alignedCols, gapless_blocks):", join ", ", @ali_values, "\n";} 
        		push (@alis, \@ali_values);      
        		$evalue=0;
        		$identity=0;
        		$alignedCols=0;
        		$gapless_blocks="";
        		$query_ali="";
        		$target_ali="";
        		$query_ali_start=0;
        		$target_ali_start=0;
        	}
    	}

		if ($line =~ /^No 1\s/) { #first alignment begins
      		$align_lines = 1;  
    	}   

  	}
  	close READ;
  	return \@alis;
}




#-----------------------------------------------------------------------------------------------------------------------------------
=head 3 Subroutine parse_gapless_blocks
Parses the aligned gapless blocks in format e.g: 1-5:2-7 7-9:8-10 ...
input: ($query_ali_start, $query_ali, $target_ali_start, $target_ali, $v)
output: $gapless_blocks (in the above format)
=cut
sub parse_gapless_blocks{
	my ($query_ali_start, $query_ali, $target_ali_start, $target_ali, $v) = @_;
    if ($v) {
        print "Query alignment start: ".$query_ali_start."\n";
		print "Query alignment: ".$query_ali."\n";
        print "Target alignment start: ".$target_ali_start."\n";
		print "Target alignment: ".$target_ali."\n";
    }
    # if the alignment is empty, then stop parsing!
    if (!$query_ali){
		print "Empty alignment!"
		return "";
    }
	#initialize:
	my $query_ali_cur_pos = $query_ali_start - 1;
	my $target_ali_cur_pos = $target_ali_start - 1;	
	my $query_ali_block_start = $query_ali_start;
	my $target_ali_block_start = $target_ali_start;
	my $query_ali_block_end;
	my $target_ali_block_end;
	my $gapless_blocks = "";
	my $last_gapless_pos;
	my @query_ali_arr = split(//, $query_ali);
	my @target_ali_arr = split(//, $target_ali);

	if (scalar @query_ali_arr != scalar @target_ali_arr) {
    	print "Error: Query and target alignments not of same length!\n";
	    exit;
	}

	my $ali_length = scalar @query_ali_arr;
	for(my $i=0; $i<$ali_length; $i++){
    	if($query_ali_arr[$i] eq "-" || $target_ali_arr[$i] eq "-") { #a gap
			if($query_ali_arr[$i-1] ne "-" && $target_ali_arr[$i-1] ne "-") { #leading gap -> write the previous gapless block
	    		$query_ali_block_end = $query_ali_cur_pos;
	    		$target_ali_block_end = $target_ali_cur_pos;
	    		$gapless_blocks .= "$query_ali_block_start-$query_ali_block_end:$target_ali_block_start-$target_ali_block_end ";
			}
			#update the current position for the sequence without a gap: 
 			if($query_ali_arr[$i] ne "-") {
	    		$query_ali_cur_pos++;
			}
			if($target_ali_arr[$i] ne "-") {
        		$target_ali_cur_pos++;
	        } 
    	} else { #not a gap
			#update the current position for both sequences
			$query_ali_cur_pos++;
			$target_ali_cur_pos++;
			if($query_ali_arr[$i-1] eq "-" || $target_ali_arr[$i-1] eq "-") { #last position had a gap -> start a new block
	    		$query_ali_block_start = $query_ali_cur_pos;
	    		$target_ali_block_start = $target_ali_cur_pos;
			}
    	}
	}

	#write the last gapless block:
	$query_ali_block_end = $query_ali_cur_pos;
	$target_ali_block_end = $target_ali_cur_pos;
	$gapless_blocks .= "$query_ali_block_start-$query_ali_block_end:$target_ali_block_start-$target_ali_block_end";
	if ($v) {print "Gapless blocks: ".$gapless_blocks."\n\n";}
	return $gapless_blocks; 
}

#-----------------------------------------------------------------------------------------------------------------------------------
=head 4 Subroutine write_output
input: ($alis_ref, $m, $v) with $m the given query uniprot sequence md5sum
output: file $o
=cut
sub write_output{
	my($alis_ref, $m, $v) = @_;
	if ($v) {print "Writing output to $o ...\n";}
  
  	my @alis = @{$alis_ref};
  	if ($v) {print "Alignments number: ".(scalar @alis)."\n";}
  	open(WRITE, ">".$o) or die "could not open file $o for writing";
  	# changed 21.2.2013: added a counter for how often we have seen this combination
  	# output format: "uniprot_sequence_md5sum,pdb_seqres_md5sum,repeat,probability,E-value,identity,alignment"

 	my $seqres_md5sum;
  	my $probability;
  	my $evalue;
	my $alignedCols;
  	my $identity;
  	my $gapless_blocks;
  	my $ali_num = 0; #counter of the alignments

	my %repeat = ();

  	foreach my $ali_values_ref (@alis){ #@alis: ($seqres_md5sum, $evalue, $identity/100.0, $alignedCols, $gapless_blocks)
    	my @ali_values = @{$ali_values_ref};
    	$seqres_md5sum = $ali_values[0];
    	if (defined $repeat{$seqres_md5sum}){
      		$repeat{$seqres_md5sum} += 1;
	    }
    	else {
      		$repeat{$seqres_md5sum} = 1;      
	    }
    	my $repeatVal = $repeat{$seqres_md5sum}; 
    	$evalue = $ali_values[1];
    	$identity = $ali_values[2];
	$alignedCols = $ali_values[3];
    	$gapless_blocks = $ali_values[4];
    	# changed 21.2.2013: retain first $nRetain, regardless of eValue
    	# changed 24.6.2014: retain if the sequence identity is >= identityCutoff (95%) 
    	if ($ali_num <= $nRetain || $evalue <= $evalCutoff || $identity >= $identityCutoff){ #leave only alignments with E-value below 10e-10 or at least the first one(s) or if it is almost identical in sequence
      		print WRITE "$m,$seqres_md5sum,$repeatVal,$evalue,$identity,$alignedCols,$gapless_blocks\n";
		    $ali_num++;
    	}
    }
    if ($ali_num == 0){
    	print STDERR "WARNING: Did not find any PDB alignments for $m \n";
    };
    close WRITE;
}
